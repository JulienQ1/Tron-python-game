import socket
import random
import time
from multiprocessing import Process, Manager, Lock
import threading
import tkinter as tk
from tkinter.simpledialog import askstring
from tkinter import messagebox

# ... (your existing Tron game code)

# Chat server constants
CHAT_SERVER_HOST = '127.0.0.1'
CHAT_SERVER_PORT = 55555

# ...

# Chat server functions

# Handle incoming chat messages from clients
def chat_handler(client_socket):
    nickname = client_socket.recv(1024).decode('utf-8')
    nicknames.append(nickname)
    clients.append(client_socket)

    broadcast(f'{nickname} has joined the chat!\n'.encode('utf-8'))

    while True:
        try:
            message = client_socket.recv(1024)
            broadcast(message, sender=nickname)
        except:
            index = clients.index(client_socket)
            clients.remove(client_socket)
            client_socket.close()
            nickname = nicknames[index]
            broadcast(f'{nickname} has left the chat!\n'.encode('utf-8'))
            nicknames.remove(nickname)
            break

# Broadcast a message to all clients
def broadcast(message, sender=None):
    for client in clients:
        if sender:
            client.send(f'{sender}: '.encode('utf-8') + message)
        else:
            client.send(message)

# Chat server setup
chat_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
chat_server.bind((CHAT_SERVER_HOST, CHAT_SERVER_PORT))
chat_server.listen(5)
print(f"Chat server started on {CHAT_SERVER_HOST}:{CHAT_SERVER_PORT}, waiting for connections...")

# Thread to handle chat clients
chat_thread = threading.Thread(target=accept_clients)
chat_thread.start()

# ...

if _name_ == "_main_":
    # ... (your existing Tron game code)

    # Continue with the rest of your Tron game code